%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 363.000000 89.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 363 89
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 363 89
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: YuGothic-Regular
%!FontType1-1.0: YuGothic-Regular 1.0000.1.8500
14 dict begin/FontName /YuGothic-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /gid12 put
dup 34 /gid16 put
dup 35 /gid18 put
dup 36 /gid2 put
dup 37 /gid17 put
dup 38 /gid13 put
dup 39 /gid15 put
dup 40 /gid29 put
dup 41 /gid30 put
dup 42 /gid28 put
dup 43 /gid31 put
dup 44 /gid22 put
dup 45 /gid21 put
dup 46 /gid1 put
dup 47 /gid26 put
dup 48 /gid32 put
dup 49 /gid23 put
dup 50 /gid20 put
dup 51 /gid24 put
dup 52 /gid27 put
dup 53 /gid4 put
dup 54 /gid3 put
dup 55 /gid5 put
dup 56 /gid8 put
dup 57 /gid9 put
dup 58 /gid7 put
dup 59 /gid10 put
dup 60 /gid19 put
dup 61 /gid25 put
dup 62 /gid6 put
dup 63 /gid11 put
dup 64 /gid14 put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -840 1 index div -619 2 index div 2378 3 index div 2642 5 -1 roll div]cvx def
/sfnts [<





35333237363534272623220706079439776688B8726555497BA053498875B1FEBD7C7B355649708F5147675DA57367AF594C56486F6C4D472004E7924940706292915D4F1D0D246E6188CC77670117357E332C605483A4534B75594C7F80463A3E39660000020062002D040A05FC000A0012001F40110412085F6C0112120A060C0A0F5F6C0A05003F2B3F12392F332B323031011133152311231121350113113437230607010331D9D975FDA6021D3D04143E48FEB905FCFBFB6AFEA0016064040BFBFB02653DFA9788FD830001008B001203D705E900240035401F14141124091E606C090911240522616C0505112402606C24041116606C110D003F2B3F2B12392F2B1112392F2B1112392F30310115210306073637363332171615140706232003371633323736353427262322070607271303A2FDA312020A2E534A54B972669076ACFED26C7D4BD2925148564B7C644C42206B2305E971FE7B2C804B2A259082C7F88B73011135D77467A6BA62543D365A1103330000030077001203FA0602001F00300041002040132031606C20200818285F6C18050839606C080D003F2B3F2B12392F2B303101161716151407062322272635343736372627263534373633321716151407060736373635342726232207061514171617170607061514171633323736353427262702AEC34B3E8E78BCD77B6F594DA6A641387E6FA6C274644943FB9F3A2F584C77864C423E3B8B04B2453C61548BA2564949439F0339566A5780C76D5C766AAB8C60534D4F5F5075A7665970618F86554C134451406377453C4E446A67423E3C8150554A67904E45584B7E744B444400020087001203DB060200180026002E401A060610000016102508606C252516101D606C10051602606C160D003F2B3F2B12392F2B1112392F11392F3031011633323736130623222726353437363332171611102122270102272623220706151417163332012B468DB055510A78DAB36F63836FA8DD736AFE23E96302A605594E878C4B42564A71C1010887ABA2014FDC8F7FBFF08C78BDAFFEC0FCBCB702D5010281727666A9AA61530001008F0010050E061D001B002140120101180D0D101803406C1803100B406C1009003F2B3F2B12392F11392F30310107022122070611101716332013170221202726111037363332171605028556FECEDF8177997FBF0142548380FE65FEE3AB9CC9A6F5D48E7A047F290152C1B0FEE0FEB7B495015831FE64E6D1014D0180D7B27D6B000100E7002D048D0602000B002040130306406C03030A0B02406C0B020A07406C0A08003F2B3F2B12392F2B3031011521112115211121152111047EFCF00250FDB0031FFC5A060275FDF675FD947505D500000100E7002D047C06020009001B400F0306406C03030908080902406C0902003F2B3F12392F

0B0223D77460DC2DFEEDA390E4010497809D8CD93FB25C4F6B5D9500000100CD002D03DD061D0011001D400F01011003110109100A030C506C0307003F2B3F333F1112392F3031011136333217161511231134232207112311014CAEC48A4F4681BEB0A27F061DFD56D3574D7BFD0602C3E3D5FD2F05F000000200AE002D016A05C900030007001240090706516C070306020A003F3FC42B30310111231113152335014C7F9DBC042DFC000400019CBFBF00000100CD002D014C061D0003000AB30301020A003F3F303101112311014C7F061DFA1005F000000100CD002D061D0446002200234012070101212206180F210A12031B506C090307003F332B323F33333F12392F33303101153633321716173633321716151123113423220706071123113423220706071123110146A0BA704C420C9CC0874C447FBB55584A3A7FB455564D3D7D042DBED7443A57D5574D7DFD0802C3E342385BFD2F02C3E33F375FFD2F040000000100CD002D03DD04460011001B400E010110110609100A030C506C0307003F2B3F333F12392F30310115363332171615112311342322071123110148ACCA8B4E4681BEB2A07F042DBED7574D7DFD0802C3E3D5FD2F04000002008B001403F10446000F001F0015400C00104E6C000708184E6C080B003F2B3F2B30310132171615100706232227263510373617220706151417163332373635342726023FCD796C8B76B3D0786A8A76B49851485C50839752485C500446A291E2FEFA9681A490E301069580688071BEDC74638172C0D9736300000200CDFEBA041904460010001D002740160101100D0D0B10060F0E031C4F6C03070B144F6C0B0B003F2B3F2B3F3F12392F11392F3031011536333217161510070623222711231113111633323736353427262322014879C2C170658871A7BF6E7F7F73A88F534D5C4D7AB6042DA4BD9F90E6FEF8977EBBFDEB0573FEDDFE3EC77E73BED8746000000100CD002D029E0446000D0016400A0A0A070800070806070A003F3F3F1112392F30310107220706071123113311363736029E0A6C5C562C7D793C665404467F5D568FFDA80400FEF6994C3E00000100750014038E0446002B002F401901010C030C192A1717221922142A034E6C2A0714194E6C140B003F2B3F2B11391112392F1112391112392F3031010726232207061514171617171617161514070623202737163332373635342726272726272635343736332003737B3AC0743F3636307B52BE47416D67B1FECB5F7B44D78E443436338B52B54337655EA1011503542BB9332C455629251B122C4841778D524EF82FC341324A5F2A271F13294B3D6B814B4700000100500014029C059C001300234013001109090C0411104E6C0111060C074E6C0C0B003F2B3F332B3212392F10C43031011121152111143332


00>] def
/CharStrings 33 dict dup begin
/.notdef 0 def
/gid1 1 def
/gid2 2 def
/gid3 3 def
/gid4 4 def
/gid5 5 def
/gid6 6 def
/gid7 7 def
/gid8 8 def
/gid9 9 def
/gid10 10 def
/gid11 11 def
/gid12 12 def
/gid13 13 def
/gid14 14 def
/gid15 15 def
/gid16 16 def
/gid17 17 def
/gid18 18 def
/gid19 19 def
/gid20 20 def
/gid21 21 def
/gid22 22 def
/gid23 23 def
/gid24 24 def
/gid25 25 def
/gid26 26 def
/gid27 27 def
/gid28 28 def
/gid29 29 def
/gid30 30 def
/gid31 31 def
/gid32 32 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-840 -619 2378 2642}def
/UniqueID 4095570 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9312448060975EE3A7373C3A15976847AEC4213ADF0F8E546DBAEAEDA22B278AC96F70F999348E2BF5F46B19CC3D860407FF36E5AE159CE1844CC8DBC34F721B8BF4EC6CC36D112064BEF110D8F5953D9E9466CFC193F846661C065EDF341B3BDD9670ECC84FD907A692B9DA477FCCB729F74AAFD28F5088A0E73489E8EB43462B618928CDAEFFB5E82CB86B0564B571E5BBDE0E9480199C3EB5679A8FDB3DCD2ACF86671124CA66DF80896BADC2BAD3B1178BD8828F23CAAC913FFC04F1827353D0F93B9DD0C67A722FD5AF12E8D9A5BBAB81410E10CF0F6332AF71DBB27874F8BE964C5092FD3E25DAAFDA68120EA68D2150A657EE8467F3373DCF41FC2BFD66B9F935DCFD547FDECBB15694425EEB4A9DB9D0AB3B77CDD000E99C255924D9424B371DFBDC8BB22DCB5D4D7FE275E2CF0EBF3FE984E3D13F74D38F9E71A9FFB195216FA430942C63B918E08D929A1AEA5E5267D227B6975AF617DF769F388BEC23D5FEA049B0B608585A9B067DDE8F07F5C7F4FA286DAD206AF8CEB7C9569E45F858274248AFACBA9610BA4255E65217177EF2A913FB445A5C16B6CCED498C8E4145A4D4DC9DD39CF1231F4DE243649B5579B2B57689A48BAB69047E42588407B7FE7078ACE33EA3BB78D6566B48D8734E9116F24D71E238D67AE95C696D1B694DA5A664F679087835C65801100FA32F18937191F5A9FD0927B938755121405354225D68CB65AE1564678F109A3C06DC72FA73DBD59134DBE4FA8D834DD83620
AA63CF4B46E574C1736FAC07821608FC1263A4A6BE3725F1203A03557AFA88ECD2D288A7AF71187820A663D6A69033B8EC11A4FD6E9A042DBEEAFB491D343E021131B6F1717A7BE8955FD8D13D3BB5BB015FECB8F0D1A16998F43E6A6302341808166DEF3566EE07FFC5DBEC9AC667B86BE9586D863E0F28572FCAC11D9D5C14245D330AA931BF13D425CB9B9DB6FFC4007645BCB081A1B483A4320F256B7AAB869DA36FA8EF831F0E856499AC17FA770305E76D62341E0E667E5561A50245FCFE888103F0D3C6867408A389034CAC53AB712FFD9B873DAC74AD393B31E59103589A383F779CD2C3F6E33A8BB038AB01F875C5F7BAFF183796B5152565646F964EDDB5D3F5CEEE617AA808B0E580C09393AE78CE0965028DCFA3A4769116755996CEB5A08957EBFDF7B05FCFEE79B1B5DA5B34358C064F2208AA528C2C9147FCCEDFB8CB4A4E82935FD3FAF5A7F0BA4415E741ADF36592AA04B9A343E6112628ABA1F4B88DDAD8CF5495B51ED16D7683E86838E84A8260BAF404D29F4EF4023EE6FE671AC03CB8F27373449561E39627ADC9CF5A1483BA4CA429BDB4C8B2B67509768D46389E3F0E2C9CFB672F22A7B44E8652698D086013642645A30BD32E5405FCBCD28BA84D541EDFB5E41E977DEB02E67CA012E97DF17D025C821AE36D9A37C932E8302E98A29812B4C26EEBC28FBCA325A8F493382A8C90CDE09054521EC081A2ABCAA7658909A1C344858BF3ACCAFAFE3CB26A3F0F9312D8C1D210DE329AF7D8D4C227004CD16FAF279423DA5366E771B3E2D2C634F699683672C380E8D8DA5AEDFACE49C9597700C2AD697E0EF4608F613289A6382EC45D377206C77340E685629D5452AEA04393CF6FBB57A214230DC1610972C15092BCB52AEDB5D9670321C3BE21F09E55F923A569B973846029ADF06040E3493DFC8A968FA3A45A44D29033CC74B536388824A60E4A06CDE4CDDB77EDF0447042A2743CA3BB39058F39F539AD2D5BF159513B8C3AFADA8A6CA714E2CD6DE2B46764516166DC1EC4896E54BAF933AB183B4C90AE0A7BC9ECF9416814D730AE7FC8CC0939F35C46D69316ED2C65830AC5BDBB36528299C644B2B0EBD87C4BCA4F77B6B0231E305F747F58F172CD50417C14F91C91A741AF7E2164DEEFB343C2D2528AF152C19DA07165370F1D29C9E1F44BD8B96F9ABD7567B8956124A2464B5DFC81B510D0B6272846D7D649C45206932182B6B6A6F2564AA294C12AAFC6E2AAC5669521A454F2B3E040EFEA9AF961AF2861BDDD714CF99AFA3BEE7BC801C25884AC99468BEDA35E38AFB291B18D3707FE6F23FD3B330CCA050CC249A214CDA3E9A8E4220FF9F8BD4EA28EF39140B943DF82F7DA5CD3D7560FC3517AE62F9751E12542BBBCFB4E9391E3D5BCF7ECECB7D3DE0769A74AD90F38291A9AF835B6ED8AEC46C09F03B8EE
8BC5A48DE32A908F6271116F22327B9219BA96FFB661CF48F2A2F692D5F758C8BB104A1F720F5C2899BF4C86093FB348448D11D92FA30679FE99C06A98C8942E14D8FF49FF4CC4DCCFCF45AA8A45838BACF4E340E0896A9B0583DA0768263A5E7FE6C11C91D9EBB280247765A819DB4B431129B4281CDD4A580996C0A4A650F8B3AC00DB756964E115DC127B6EB469BE33FA483E8CFFF6BEE0012EFE3CE556BBDC0A69605A8E8D27C2F0DDE74C576EB3B1FB0A507A3486D833870C811E7B27FBB517114C7265E7E22A47C6ADEA5F78ADCC12111325086B27D39F8441FC71A1CE99239E04F8E933696D2096FA7A6F02896E661E47F4448B8C98CAAE5937EC172FD89001E8BE522D1C0A5EDB9FC92DA8E29CD816D26923EE271AA36978EABE125FB4A2D491E6788C23D0E2EEAA24C558123A6902B18558FFDF4EF2B282FF5B8D75A3C53CDCE9151B4B18EEF81FBE1356126ED4D56628F89228CA315CD549639BDDEB3B744966B42280DE434939E4B897EF89146D981FEDCEF218A29A277697F64FE9D681A9D0C764E1616AEC4D86DABEAFAAB5D57473D843F5B340A0AE952672EE79BB10A1972B1054AB4F448D5694DC50DCB2FA82AA7BE7F3DEBE739C829BA091A9D87D0016AB9944C9B276B313FCE53F652F421BE7568EB0E383F2617297077181B92FBF03F592A3237DFEE29B0FDA292DCF87206EDCEE8E5ACC8D216B1F6E6F7E51D8547A3363908E9A85301A663E2507A7B7A194CC7318BB9A097120BA0EE1D8C649D879CFBC7BF6CB19FE04ED44E085962FEBBE8152CF7F243ECBB330CFA175FAA959368ADC9AFDE2027E2EF9696B32689492B09BABE1B67AC16A5F50325B41AD3AD9BFCA7B56628A3BFDDBB012023626D2EC7C2109BBEB3FFFC405E962AE5DE417F059217DDF692AF433534041B430E28DC079F024EE592CD0896A9DAF3C20C744A15DAFF26E87293AEFAD26B673E7A257ADA0AB127DF7D1AE9AB0F96FB3880FEE83784D464CEA972DB141C9673F05906330005174E40F37417E4D3188A7FDDFDC005ADE4C29377EF929B8377EE3E4F266C1BFFECAC798BCDAD5C66BE540C34FF7FA11B557BA71FE6B05C10355F9DF5A48BF57C04513D1F7981C26610C7317C23AEA1C02AE27F9A824809E58167F2FC19C6E45FD89CE5365E1A6587768CA5CDD479410D127F9798D86F1E137B427D78AB24B930D872C2C2A4A322E9BC59053D158C3E33F6AC20A21872C46C3992C733439094D8EAC9B4A2F8173BCA57396ADA3617E50F737756DFFCED3E1E72B9BC8F33E8BC81FB14E2139B5508BFA76776A17ADC03E22897B02849996BB34B84E473AB6FA69F818185BE790183E9885934080E139D30F3B041AA960C2DB8036EB3DFD8BF45E61AE5E71560F32F908B1D1AA94FE20A946FFCA6663B3D7975F57FEDDE426B2BA6C0465C82096934D7D8BB3
854829C2B57E8A621BFC3DF855A7D7493D9ADDFA02B14D30DEC23E640758ABF3D859975853F831E63D693B71E8C8E869C8B558D13EBBA08BC8CB4CC430A5494C63D05A89E9E7250902A0AEF31213C2B1350410E50F49A6624C1A5665DBD2FF86E65EC3C7C48D5C2D23116C81FDEAB2CF43574F18ABFD49799CD3E55862F7CABB07066985F66B82EAEF7A240CC0C3D3EC9B030203D39F8858863D86274E7A9E8DF6D548CD06EB41E039A0A677FE8F627D37CC1DC00410209DA0B786DE8D08A32E62598A9F0A833D6083CD1794D4AB9CE7D3C20E6CD36C59EA9D7392FC3D37C442632220A5E299BC13A29DDAD72FC2DB5E0CE347283D52D44CA6E76AEBB54CD17AE8719CBB15F6B8B40E39C39C3D0B3C64BBF15FB7ABDDA7A8E9D3CDA77DB03B9A59781196EFA0D089A3CF8844757DD563116F05D9AB69234029C98CFAC7C9D21117F42A5B30609687A05DA6C230EC75CCCF0B9DAEDC9EDFB602C741760E7266980D97409F6F9A19524E8B721359167B489C90E7FCE803DD3548A1471AD92F23838AB8F64326CFB6233A15085AAC3C454AC3AF7E15F253882C06ED8B0FAE13A3F34C2DDBC71C12D91C0E892C866974BFC55DE36C612AFB0572136177E1CDB3E534A5485EDE7195EA7CB312B05754B99B53A9CDEFF3D2E270D994654CBF2C7A68F52BFEC039392AA1B8F9DE987E02BEA070BDE08E192CDA2EDD574CC28A76364ADEBEC960F0DE2AFB209D613A76CCB45BED29C442AAD7B9C4EC969588285292F3A43A9E6A2E88BA9E6B701D4B3CB73636EEC4D0269342CBF772CDCE545FBA72C8A0C5D9EA1078D071B644B2EA2F51293A5A87813EC277D1A2859CA2EAD70C6ACE54B78FCF3B8FE4628D531E7B68BAA54FD93CE716ACDF692800BA511DF53B641121187C7AE1C70371B3FFEA1E3972E61E84A57FE6E22F5E819496ADB19992B8CD407F6680A4204CC0BFADF9464743FC1B649859F8D37D15B5882BE9E5D6175D55C761018BD89C0C5391F965E4F037C9D124686DBE7381E9BF67F6109C9C7658580DD1E32E67A8DD9774B5AA1827E4B5663A40F450CE06DBA801206153F4BD1281758D49CE6F379C371331B2206C5C917ED8B4399E89A3F386476123061B6E029F511680BCCCE7DE8ACFE4A3396C11787F8A3B5949D7D3269CC247F8AF86F3C3838F8BF376FE08EA9F7755D0021A8DA4D0C9EE5C2D5D548E55247D711A45EDB54630B1AC28E83CB6CA99F0C66452A99D1A6399FAF3DA2060C24963D315E0D2A38D78D9702BA90385B1139AB86271BCD18BDF544EC2EE1B7808A576E3725672BEA8AEA6E6148C357B29BB41F650BC292422131FF9C9AC1F90A9DF6CF31D7C97FAD0E8D86FABE29862C614D9D5A18D8F7793FD6BA667F1A8044477657B40C1910CCE064F453A1CD26E69E3DF4EF7CDBFCECB4FA4B853B9057E8E54ADD5C909EC891073

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/YuGothic-Regular cguidfix
/F1.1/YuGothic-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 0 363 89 rc
-112.5 385.5 m
446.5 385.5 l
446.5 -397.5 l
-112.5 -397.5 l
h
-112.5 385.5 m
f
Q
/Cs2 SC
1 1 1 sc
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
9 9 345 71 rc
9 9 m
354 9 l
354 80 l
9 80 l
h
f
6350 w
1 j
0 0 0 sc
0.00007874 0 0 -0.00007874 9.5 76.837639 cm
2133600 -12700.014 m
2133600 772795 l
S
0 192405 m
4356100 192405 l
S
CM
9.5 77.837639 m
352.5 77.837639 l
352.5 77.170967 l
9.5 77.170967 l
h
9.5 76.504295 m
352.5 76.504295 l
352.5 75.837639 l
9.5 75.837639 l
h
f
0.00007874 0 0 -0.00007874 9.5 76.837639 cm
0 769620 m
4356100 769620 l
S
Q
0 0 0 sc
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
177 18 65 62 rc
1 0 0 1 178.25 -6 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
(!"#)[ 8.000401 11.000401 0.000000 ] xS
Q
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
9 9 345 71 rc
1 0 0 1 206.25 -6 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
($)s
1 0 0 1 211.25 -6 cm
0 71 m
(%&')[ 8.000401 7.004400 0.000000 ] xS
Q
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
241 18 112 62 rc
1 0 0 1 242.25 -6 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
(\(\)*\(*+,-.)[ 6.999600 3.999600 6.999601 6.999599 6.999599 6.003601 6.999599 6.999599 0.000000 ] xS
Q
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
9 9 345 71 rc
1 0 0 1 297.25 -6 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
(/,01*-)[ 9.999600 6.999599 3.999601 6.999599 6.999598 0.000000 ] xS
Q
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
9 9 169 71 rc
1 0 0 1 10.25 -21 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
(\(\),23+3*4)[ 6.999600 3.999600 6.999599 6.003599 3.003601 6.003597 3.003601 6.999599 0.000000 ] xS
Q
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
177 9 65 71 rc
1 0 0 1 203.25 -21 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
(567899)[ 6.999600 3.003599 6.999600 6.999599 6.999603 0.000000 ] xS
Q
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
241 9 112 71 rc
1 0 0 1 314.25 -21 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
(565:;7)[ 6.999600 3.003599 6.999600 6.999599 6.999603 0.000000 ] xS
Q
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
9 9 169 71 rc
1 0 0 1 10.25 -36 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
(\),2<==)[ 3.999600 6.999600 6.003599 6.999599 3.003603 0.000000 ] xS
Q
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
177 9 65 71 rc
1 0 0 1 203.25 -36 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
(567>:?)[ 6.999600 3.003599 6.999600 6.999599 6.999603 0.000000 ] xS
Q
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
241 9 112 71 rc
1 0 0 1 321.25 -36 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
(5659>)[ 6.999600 3.003599 6.999600 6.999599 0.000000 ] xS
Q
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
9 9 169 65 rc
1 0 0 1 10.25 -51 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
(@7)[ 6.999600 0.000000 ] xS
Q
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
177 9 65 65 rc
1 0 0 1 203.25 -51 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
(567::;)[ 6.999600 3.003599 6.999600 6.999599 6.999603 0.000000 ] xS
Q
q
9 80 m
354 80 l
354 9 l
9 9 l
h
9 80 m
W
241 9 112 65 rc
1 0 0 1 321.25 -51 cm
/F1.1[ 12 0 0 12 0 0]sf
0 71 m
(56588.)[ 6.999600 3.003599 6.999600 6.999599 6.999603 0.000000 ] xS
ep
end
